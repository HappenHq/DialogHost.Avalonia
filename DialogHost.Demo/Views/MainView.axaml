<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:views="clr-namespace:DialogHostDemo.Views"
             xmlns:models="clr-namespace:DialogHostDemo.Models"
             xmlns:dialogHostAvalonia="clr-namespace:DialogHost;assembly=DialogHost.Avalonia"
						 mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="DialogHostDemo.Views.MainView">
	<dialogHostAvalonia:DialogHost Identifier="MainDialogHost"
                                 DialogMargin="16"
                                 dialogHostAvalonia:DialogHostStyle.CornerRadius="8">
		<dialogHostAvalonia:DialogHost.DialogContentTemplate>
			<DataTemplate DataType="models:Sample2Model">
				<StackPanel>
					<TextBlock TextAlignment="Center">Your lucky number:</TextBlock>
					<TextBlock Classes="Body1"
                     TextAlignment="Center"
                     Text="{Binding Number}" />
					<Button Margin="0 8 0 0"
                  Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=dialogHostAvalonia:DialogHost}, Path=CloseDialogCommand}">
						THANKS, CLOSE
					</Button>
				</StackPanel>
			</DataTemplate>
		</dialogHostAvalonia:DialogHost.DialogContentTemplate>
		<Grid Margin="8"
          ColumnDefinitions="* 8 * 8 *" RowDefinitions="Auto 8 *"
          VerticalAlignment="Center" HorizontalAlignment="Stretch">
			<TextBlock Grid.Column="0" Grid.Row="0"
                 TextWrapping="Wrap">
				SAMPLE 1: Localized dialog encapsulating specific content, launched from a routed command, response handled in code-behind.
			</TextBlock>
			<Border Grid.Column="0" Grid.Row="2"
              MinHeight="256" MinWidth="256"
              BorderThickness="1" BorderBrush="Black">
				<views:FruitBowl />
			</Border>

			<TextBlock Grid.Column="2" Grid.Row="0"
                 TextWrapping="Wrap">
				SAMPLE 2: Dialog without animation.
			</TextBlock>
			<Border Grid.Column="2" Grid.Row="2"
              MinHeight="200" MinWidth="200"
              BorderThickness="1" BorderBrush="Black">
				<dialogHostAvalonia:DialogHost Identifier="NoAnimationDialogHost"
                                       DisableOpeningAnimation="True">
					<Button HorizontalAlignment="Center" VerticalAlignment="Center"
                  Click="OpenNoAnimationDialog">
						Open
					</Button>
				</dialogHostAvalonia:DialogHost>
			</Border>

			<TextBlock Grid.Column="4" Grid.Row="0"
                 TextWrapping="Wrap">
				SAMPLE 3: Top level dialog with custom corner radius, using OpenDialog, passing content via the Parameter. You can pass a view model, provided a corresponding DataTemplate can be found in the scope of the root DialogHost.
			</TextBlock>
			<StackPanel Grid.Column="4" Grid.Row="2">
				<Button Margin="8" Click="OpenDialogWithView">PASS VIEW</Button>
				<Button Margin="8" Click="OpenDialogWithModel">PASS MODEL</Button>
			</StackPanel>
		</Grid>
	</dialogHostAvalonia:DialogHost>
	<UserControl.Resources>
		<StackPanel x:Key="Sample3View">
			<ProgressBar IsIndeterminate="True" />
			<Button Margin="0 16 0 0"
              Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=dialogHostAvalonia:DialogHost}, Path=CloseDialogCommand}">
				CLOSE
			</Button>
		</StackPanel>
		<StackPanel x:Key="Sample2View">
			<TextBlock>It opened without animation</TextBlock>
			<Button Margin="0 16 0 0"
              Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=dialogHostAvalonia:DialogHost}, Path=CloseDialogCommand}">
				CLOSE
			</Button>
		</StackPanel>

	</UserControl.Resources>

</UserControl>
